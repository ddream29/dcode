When we do AND bit operation between number and number-1, the rightmost bit of one in the original number would be turned off (from one to zero).

class Solution {
  public int rangeBitwiseAnd(int m, int n) {
    while (m < n) {
      // turn off rightmost 1-bit
      n = n & (n - 1);
    }
    return m & n;
  }
}

2 4

4=100
3=011
2=010
1=001


Time Complexity: \mathcal{O}(1)O(1).

Similar as the bit shift approach, the number of iteration in the algorithm is bounded by the number of bits in an integer number, which is constant.

Though having the same asymptotic complexity as the bit shift approach, the Brian Kernighan's algorithm requires less iterations, since it skips all the zero bits in between.

Space Complexity: \mathcal{O}(1)O(1), since no additional memory is consumed by the algorithm.
  
